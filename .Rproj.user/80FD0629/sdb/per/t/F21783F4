{
    "contents" : "loglikelihood = function(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat) {\n  \n  disclass <- table(factor(c, levels = 1:K))\n  activeclass <- which(disclass!=0)\n  \n  loglikelihood <- rep(0, length(activeclass))\n  \n  \n  for (j in 1:length(activeclass)) {\n    clust <- which(c==activeclass[j])\n    \n    Ytemp <-  matrix(NA, nrow = length(clust), ncol = D)\n    \n    if (length(clust)==1){\n      Ytemp <- matrix(0, nrow =1, ncol =D)\n      \n    } else {\n      Ytemp <- scale(Y[clust,1:D], center = TRUE, scale =TRUE)\n    }\n   \n  \n    for ( l in 1:length(clust)) {\n    if (Time[clust[l],2]==1){\n      loglikelihood[j] <- loglikelihood[j] +  log(dMVN(as.vector(t(Y[clust[l],1:D])), mean = mu[activeclass[j],1:D], Q= S[activeclass[j],1:D,1:D])) + log(dnorm(x = That[clust[l]], mean = beta0[activeclass[j]] + betahat[activeclass[j],1:D] %*% as.vector(t(Ytemp[l,1:D])), sd = sqrt(sigma2[activeclass[j]]) ))\n    } else{\n      loglikelihood[j] <- loglikelihood[j] + log(dMVN(as.vector(t(Y[clust[l],1:D])), mean = mu[activeclass[j],1:D], Q = S[activeclass[j],1:D,1:D])) + log(dtruncnorm(x = That[clust[l]], a = Time[clust[l],1], b = max(Time[,1]), mean = beta0[activeclass[j]] + betahat[activeclass[j],1:D] %*% as.vector(t(Ytemp[l,1:D])), sd = sqrt(sigma2[activeclass[j]]) ))\n    }\n    }\n    \n    \n  }\n  \n  return(sum(loglikelihood))\n  \n  \n}",
    "created" : 1427796320284.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1774943120",
    "id" : "F21783F4",
    "lastKnownWriteTime" : 1427797515,
    "path" : "~/Dropbox/Code/DPmixturemodel/DPplusAFT/likelihood.R",
    "project_path" : "likelihood.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}