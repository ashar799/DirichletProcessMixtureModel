{
    "contents" : "posteriortimeparameters = function(c, That, lambda2,tau2,sigma2,beta0, betahat, Y, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.data ) {\n  \n  \n  \n  numclust <- table(factor(c, levels = 1:K))\n  activeclass<- which(numclust!=0)\n  \n  \n  for (j in 1:length(activeclass)) {\n    \n    reg.blas <- 0\n    \n    sum <- c(0)\n    \n    coeff <- 0\n    \n    \n    ## A Temporary matrix that needs to store the standardized regressors\n    clust <- which(c==activeclass[j])\n    \n    Ytemp <-  matrix(NA, nrow = length(clust), ncol = D)\n    \n    if (length(clust)==1){\n     Ytemp <- matrix(0, nrow =1, ncol =D)\n      \n    } else {\n      Ytemp <- scale(Y[clust,1:D], center = TRUE, scale = TRUE)\n             }\n    \n    ### Part where I use the MONOMVN PACKAGE\n    if (length(clust) > 1){\n    Ttemp <- as.vector(That[clust])\n    ntemp <- length(clust)\n    reg.blas <- blasso(Ytemp, Ttemp, T =300,thin = 10, RJ = TRUE, beta = as.vector(betahat[activeclass[j],]),lambda2 = lambda2[activeclass[j]],s2 = sigma2[activeclass[j]], mprior = 0.20 ,rd =c(r,si), ab = c(1,1),normalize = TRUE, verb = 0)\n    sum <- summary(reg.blas, burnin= 100)\n    \n    ## Selecting those features which are relevant\n    coeff <- unlist(lapply(strsplit(sum$coef[3,], split = \":\"), function(x) as.numeric(unlist(x)[2])))\n   \n    \n    \n    beta0[activeclass[j]] <- coeff[1]\n    \n    indexplusone <- D+1\n    ind <- 2:indexplusone\n    betahat[activeclass[j], ] <- coeff[ind]\n    \n    ta <- unlist(lapply(strsplit(sum$tau2i[3,], split = \":\"), function(x) as.numeric(unlist(x)[2])))\n    tau2[activeclass[j],] <- ta\n    \n    sigma2[activeclass[j]] <- sum$s2[3]\n    lambda2[activeclass[j]] <- sum$lambda2[3]\n    } else {\n      \n      \n    tempvector <- as.vector(That[clust])\n    tempmean <- mean(tempvector)\n    tmpscl <- scale(tempvector, center = TRUE, scale =FALSE)\n    tempmatrix <- Ytemp\n    tempnumber <- length(tempvector)\n    \n    \n    tempD <- matrix( 0, nrow = D, ncol =D)\n    \n    if(any(is.na(tau2[activeclass[j],])) == TRUE)\n    {\n      tau2[activeclass[j],] <- priordraw(beta, W, epsilon, ro, r, si,N,D, sig2.dat)$tau2\n    }\n    \n    betahat[activeclass[j],] <- as.vector(priordraw(beta, W, epsilon, ro, r, si,N,D, sig2.dat)$betahat)\n    \n    for ( i in 1:D ) {\n      tempD[i,i] <- tau2[activeclass[j],i]\n    }\n    \n    \n    \n    \n    \n    \n    ## For updating the sparsity prior\n    lambda2[activeclass[j]] <- rgamma(1, shape = r+D, rate = si + tr(tempD) )\n    \n    #For updating tau2\n    \n    for ( h in 1:D)  {\n      tau2[activeclass[j], h] <- (rinv.gaussian(1,mu= sqrt(lambda2[activeclass[j]] * sigma2[activeclass[j]]/ (betahat[activeclass[j],h])^2), lambda = lambda2[activeclass[j]]))^-1\n    } \n    \n    #For updating sigma2\n    ## For updating the sigma2 parameter we need temporary matrices\n    \n    tempprod <- NA\n    \n    tempscalesigma1 <- as.vector(tmpscl - Ytemp %*% betahat[activeclass[j], ])\n    \n    tempprod <- tempscalesigma1 %*% tempscalesigma1\n    \n    tempscalesigma2 <- NA\n    \n    tempscalesigma2 <- t(betahat[activeclass[j], ] %*% solve(tempD) %*% betahat[activeclass[j], ] )\n    \n    \n    sigma2[activeclass[j]] <- rinvgamma(1, shape = 1+ 0.5 * (tempnumber +D -1), scale = 1 + (0.5* (tempprod + tempscalesigma2 )) )\n    ## This is because the error of the model may make it computationally infeasible\n    \n    \n    ## For updating Betahat we need some matrices\n    tempD <- matrix( 0, nrow = D, ncol =D)\n    for ( i in 1:D ) {\n      tempD[i,i] <- tau2[activeclass[j],i]\n    }\n    \n    tempA <-   matrix(NA, nrow = D, ncol = D)\n\n    tempA <- t(Ytemp) %*% Ytemp + solve(tempD)\n    \n    \n    betahat[activeclass[j],] <- mvrnorm(1, mu = solve(tempA) %*% t(tempmatrix) %*% tmpscl, Sigma=  sigma2[activeclass[j]] * solve(tempA))\n    \n    \n    beta0[activeclass[j]] <- rnorm(1, mean = tempmean, sd= sqrt(sigma2[activeclass[j]]/tempnumber))\n\n  \n  \n  }\n\n}\n\n\n\n\n\n\nlist('beta0' = beta0,'sigma2' = sigma2, 'betahat' = betahat, 'lambda2' = lambda2, 'tau2' =  tau2 )\n}\n",
    "created" : 1428357787987.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3227582590",
    "id" : "84EE9FD9",
    "lastKnownWriteTime" : 1428497466,
    "path" : "C:/Users/Oana-Ashar/Desktop/Dropbox/Code/DPmixturemodel/DPplusAFT/posteriortimeparameters.R",
    "project_path" : "posteriortimeparameters.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}