{
    "contents" : "rm(list = ls())\nsetwd('/home/bit/ashar/Dropbox/Code/DPmixturemodel/DPplusAFT')\n#setwd(\"C:/Users/Oana-Ashar/Desktop/Dropbox/Code/DPmixturemodel/DPplusAFT\")\n\nlibrary(MASS)\nlibrary(mixtools)\nlibrary(matrixcalc)\nlibrary(stats)\nlibrary(Runuran)\nlibrary(truncnorm)\nlibrary(Matrix)\nlibrary(MCMCpack)\nlibrary(psych)\nlibrary(VGAM)\nlibrary(MixSim)\nlibrary(statmod)\nlibrary(flexclust)\nlibrary(survcomp)\nlibrary(mixAK)\nlibrary(mclust)\nlibrary(monomvn)\n\n\n## Run my model on some toy data set\nN = 200\nD = 5\ndminus = 4\n\n## Generating the covaiance structure \nSigm <- matrix(0, nrow = D, ncol =D)\n\nL=  as.integer(D/2)\nQ = D- L\nfor ( i in 1:L){\n  for (j in 1:L){\n    Sigm[i,j]=  3.5\n  }\n}\nfor ( i in Q:D){\n  for (j in Q:D){\n    Sigm[i,j]=  3.5\n  }\n}\n\ndiag(Sigm) <- 4\n\nxto <- mvrnorm(n = N, mu = c(rep(4,D)), Sigma = Sigm)\n\n## Generating the mixing distribution\nx <- xto[,1]\ny <- rep(0,N)\nc.true <- rep(0,N)\n  \nfor ( i in 1:N){\n  pi1 <-  dnorm(x[i],mean = 4, sd = 0.5)\n  pi2 <-  dnorm(x[i],mean = 6, sd = 0.5)\n  c.true[i] <- sample(2, size =1, prob= c(pi1,pi2))\n  if ( c.true[i] ==1){\n    y[i] <- rnorm(1,mean = x[i], sd = 0.25)\n  } else{\n    y[i] <-  rnorm(1,mean = 4.5 + 0.1*x[i], sd = sqrt(1/8))\n  }\n  \n}\n\ntime <- y\ncensoring <- rep(1,N)\n\nTime <-  cbind(time,censoring)\n\n\nY <-xto\n\nK = as.integer(N/2)\n\nsource('rchinese.R')\n## Initialization of all the hyperparameters and \nshape.alpha <- 2\nrate.alpha <- 1\nalpha  = rgamma(1, shape = shape.alpha, rate = rate.alpha )\nbeta  = D+1\nro = 0.5\n\n## Empirical Bayes Estimate of the Hyperparameters\n\nepsilon = as.vector(apply(Y,2,mean))\nW = cov(Y)\nc <-  rchinese(N,alpha)\nf <- table(factor(c, levels = 1:max(c)))\n\n## Initialization of the parameters for Gaussian Mixture\nmu = matrix(data = NA, nrow = K, ncol = D)\nS = array(data = NA, dim =c(K,D,D))\n\n\n#Sparsity controlling parameter\nr =1\nsi = 1.78\n\nlambda2 <- numeric(K)\ntau2 = matrix(data = NA, nrow = K, ncol = D)\nbetahat = matrix(data = NA, nrow = K, ncol = D)\nsigma2 <- rep(NA, K)\nbeta0 <- rep(NA, K)\nThat <-  numeric(N)\n\n## Fitting a linear model to the whole model\nYsc <- scale(Y[1:N,1:D], center = TRUE, scale =TRUE)\nlm.data <- lm(time ~ Ysc)\nsig2.dat <-  var(lm.data$residuals)\n\n\n## Set Some Initial Values for the Cluster Parameters\n\nsource('priordraw.R')\ndisclass <- table(factor(c, levels = 1:K))\nactiveclass <- which(disclass!=0)\nfor ( j in 1:length(activeclass)){\n  \n  priorone <- priordraw(beta, W, epsilon, ro, r, si, N, D, sig2.dat)  \n  mu[activeclass[j],] <- priorone$mu\n  S[activeclass[j],1:D,1:D]  <- priorone$Sigma  \n  beta0[activeclass[j]] <- priorone$beta0 \n  sigma2[activeclass[j]] <- priorone$sigma2\n  betahat[activeclass[j],1:D] <- priorone$betahat \n  lambda2[activeclass[j]] <- priorone$lambda2 \n  tau2[activeclass[j], 1:D] <- priorone$tau2\n}\n\n# The Time has to be initialized\nsource('updatetime.R')\nti <- updatetime(c, Y, Time,That, beta0, betahat, sigma2)\nThat <- ti$time\n\nF =2\n\nsource('kmeansBlasso.R')\nkm <- kmeansBlasso(Y,That, F,K, beta, W, epsilon, ro, r, si, N, D, sig2.dat, c, mu, S, beta0, betahat, sigma2, lambda2, tau2)\nc.init <- km$c\nc <- c.init\nmu <- km$mu\nS <- km$S\nsigma2 <- km$sigma2\nbetahat <- km$betahat\nbeta0 <- km$beta0\nlambda2 <- km$lambda2\ntau2 <- km$tau2\n\nsource('posteriorchineseAFT.R')\nsource('posteriorGMMparametrs.R')\nsource('posteriortimeparameters.R')\nsource('updatetime.R')\nsource('priordraw.R')\nsource('likelihood.R')\nsource('posterioralpha.R') \n\ncognate <- NA\nparam <- NA\nparamtime <- NA\nloglike<- rep(0, iter)  \ntimeparam <- NA\ntime.predicted <- c(0)\ncindex <- c(0)\n\nprint(loglikelihood(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat) )\n\nlikli <- c(0)\no.initi = 1\niter.burnin = 200\n\n\nprint(\"BURNIN...PHASE\")\nfor (o in o.initi:iter.burnin) {\n  ################## PARAMETERS OF THE DP Mixture Model ######################################################\n  ## Updating the parameters based on the observations \n  param <- posteriorGMMparametrs(c,Y,mu,S, alpha,K, epsilon, W, beta, ro,N,D )\n  mu <- param$mean\n  S <- param$precision\n  paramtime <- posteriortimeparameters(c, That, lambda2,tau2,sigma2,beta0, betahat, Y, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.data)\n  beta0 <- paramtime$beta0\n  betahat <- paramtime$betahat\n  sigma2 <- paramtime$sigma2\n  lambda2 <- paramtime$lambda2\n  tau2 <- paramtime$tau2\n  \n  ########################## THE HYPERPARAMETERS OF THE GMM #################################  \n  source('posteriorhyper.R')  \n  #  Updating the hyper paramters\n  hypercognate <- posteriorhyper (c, Y, mu, S, epsilon, W, beta, ro )\n  epsilon <- hypercognate$epsilon\n  tmpW <- hypercognate$W\n  W <- matrix(as.matrix(tmpW),nrow = D, ncol =D)\n  ro <- hypercognate$ro\n  \n  ################# INDICATOR VARIABLE ##################################################################\n  ## Updating the indicator variables and the parameters\n  source('posteriorchineseAFT.R')\n  cognate <- posteriorchineseAFT(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat)\n  c <- cognate$indicator\n  mu <- cognate$mean\n  S <- cognate$precision\n  beta0 <- cognate$beta0\n  betahat <- cognate$betahat\n  sigma2 <- cognate$sigma2\n  lambda2 <- cognate$lambda2\n  tau2 <- cognate$tau2\n  \n  ########################### The Concentration Parameter #################################################################\n  \n  \n  source('posterioralpha.R') \n  # Updating the concentration parameter\n  alpha <- posterioralpha(c, N, alpha, shape.alpha, rate.alpha)\n  \n  \n  ##################### Print SOME Statistics #####################################################\n  \n  likli[o] <- loglikelihood(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat)\n  print(likli[o])\n  \n  print(o/iter.burnin)\n} \n\n\n## considering that we are now in the posterior region we can try to sample from the posterior and make predictions\n## We make predictions on a uniform Ystar in this case between 0 and 1\n\nN2 =  35\nx1star <- seq(from = 0, to = 10, by = 10/(N2-1) )\n# x.irrelstar <- mvrnorm(n = N2, mu = c(rep(4,dminus)), Sigma = diag(x =1, nrow = dminus, ncol = dminus))\n# \nx.irrelstar = xto[1:N2,2:D]\nxstar = cbind(x1star,x.irrelstar)\nprint(\"POSTERIOR...PREDICTION\")\n\n\niter  = 100\nthin =  2\no =1\nTstar <- matrix(0, nrow =N2, ncol = as.integer(iter/thin))\n\nfor (o in 1:iter) {\n  ################## PARAMETERS OF THE DP Mixture Model ######################################################\n  ## Updating the parameters based on the observations \n  param <- posteriorGMMparametrs(c,Y,mu,S, alpha,K, epsilon, W, beta, ro,N,D )\n  mu <- param$mean\n  S <- param$precision\n  paramtime <- posteriortimeparameters(c, That, lambda2,tau2,sigma2,beta0, betahat, Y, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.data)\n  beta0 <- paramtime$beta0\n  betahat <- paramtime$betahat\n  sigma2 <- paramtime$sigma2\n  lambda2 <- paramtime$lambda2\n  tau2 <- paramtime$tau2\n  \n  ########################## THE HYPERPARAMETERS OF THE GMM #################################  \n  source('posteriorhyper.R')  \n  #  Updating the hyper paramters\n  hypercognate <- posteriorhyper (c, Y, mu, S, epsilon, W, beta, ro )\n  epsilon <- hypercognate$epsilon\n  tmpW <- hypercognate$W\n  W <- matrix(as.matrix(tmpW),nrow = D, ncol =D)\n  ro <- hypercognate$ro\n  \n  ################# INDICATOR VARIABLE ##################################################################\n  ## Updating the indicator variables and the parameters\n  source('posteriorchineseAFT.R')\n  cognate <- posteriorchineseAFT(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat)\n  c <- cognate$indicator\n  mu <- cognate$mean\n  S <- cognate$precision\n  beta0 <- cognate$beta0\n  betahat <- cognate$betahat\n  sigma2 <- cognate$sigma2\n  lambda2 <- cognate$lambda2\n  tau2 <- cognate$tau2\n  \n  ########################### The Concentration Parameter #################################################################\n  \n  \n  source('posterioralpha.R') \n  # Updating the concentration parameter\n  alpha <- posterioralpha(c, N, alpha, shape.alpha, rate.alpha)\n  \n\n  ##################### GEt the predictions after every thin iteration #####################################################\n  \n  source('predict.R')\n  if((o %% thin) == 0){\n    to <-  o/thin\n    resultat <- predict(c, Y, That, Time, beta0, betahat, sigma2, xstar) \n    Tstar[,to]  <- resultat$tstar\n    \n  }\n  likli[o] <- loglikelihood(c,Y,mu,S,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K, epsilon, W, beta, ro,D, r, si, Time,N, sig2.dat)\n  \n  \n  print(o/iter)\n} \n\n## Predictions\nTstar <- Tstar[,1:30]\n\npostmat <- apply(Tstar,1,mean)\npostsd <- apply(Tstar,1,sd)\n\n\np2D <- ggplot() + ggtitle(\"Predicted values\") + geom_point(aes(x = xstar[,1], y = postmat)) + geom_errorbar(aes(x=xstar[,1], ymin=postmat-postsd, ymax=postmat+postsd), width=0.25) + geom_point(aes(x = Y[,1], y = time, color = factor(c)))+ scale_color_manual(values = c(\"red\", \"blue\", \"green\")) + labs(x = \"x\", y= \"y\")\n\n",
    "created" : 1433875159237.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "172|32|221|0|\n241|19|297|0|\n",
    "hash" : "2585018221",
    "id" : "DCFDC6C5",
    "lastKnownWriteTime" : 1433882900,
    "path" : "C:/Users/Oana-Ashar/Desktop/Dropbox/Code/DPmixturemodel/DPplusAFT/wade.R",
    "project_path" : "wade.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}